// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Authentication Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  sessions Session[]
  
  // Business Relations
  identificationTypeId String?
  identificationType   IdentificationType? @relation(fields: [identificationTypeId], references: [id])
  userIdentificationNumber String?
  invoices Invoice[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users          User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  resource   String
  action     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Business Models
model IdentificationType {
  id                    String   @id @default(cuid())
  identificationTypeName String
  identificationTypeEntity String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  users        User[]
  thirdParties ThirdParty[]

  @@map("identification_types")
}

model ThirdParty {
  id                        String   @id @default(cuid())
  thirdPartyName            String
  thirdPartyIdentification  String
  thirdPartyStatus          Int      @default(1)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  identificationTypeId String
  identificationType   IdentificationType @relation(fields: [identificationTypeId], references: [id])
  invoices            Invoice[]

  @@map("third_parties")
}

model Invoice {
  id            String   @id @default(cuid())
  invoicePrefix String
  invoiceNumber String
  invoiceDate   DateTime
  invoiceCufe   String?
  invoiceState  Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  thirdPartyId String
  thirdParty   ThirdParty @relation(fields: [thirdPartyId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  invoiceProducts InvoiceProduct[]
  apiResponses    ApiResponse[]

  @@map("invoices")
}

model InvoiceProduct {
  id                  String   @id @default(cuid())
  invoiceProductName  String
  productQuantity     Float
  productPrice        Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxId       String?
  tax         Tax?    @relation(fields: [taxId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("invoice_products")
}

model Tax {
  id              String   @id @default(cuid())
  taxType         String
  taxName         String
  taxPercentage   Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  invoiceProducts InvoiceProduct[]

  @@map("taxes")
}

model Warehouse {
  id              String   @id @default(cuid())
  warehouseName   String
  warehouseActive Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  invoiceProducts InvoiceProduct[]

  @@map("warehouses")
}

model ApiResponse {
  id                String   @id @default(cuid())
  apiResponseDate   DateTime
  apiResponseJson   Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("api_responses")
}

// Integration Models
model SiigoCredentials {
  id               String   @id @default(cuid())
  apiUser          String
  accessKey        String
  applicationType  String   @default("production")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("siigo_credentials")
}

// Scraping Models
model ScrapedDocument {
  id                String   @id @default(cuid())
  documentUUID      String   @unique // UUID del botón de descarga (nombre del archivo)
  reception         String?  // Recepción
  documentDate      String?  // Fecha
  prefix            String?  // Prefijo
  documentNumber    String?  // Nº documento
  documentType      String?  // Tipo
  senderNit         String?  // NIT Emisor
  senderName        String?  // Emisor
  receiverNit       String?  // NIT Receptor
  receiverName      String?  // Receptor
  result            String?  // Resultado
  radianStatus      String?  // Estado RADIAN
  totalValue        String?  // Valor Total
  isDownloaded      Boolean  @default(false)
  downloadPath      String?
  downloadDate      DateTime?
  extractedFiles    String?  // JSON string with array of extracted file paths
  extractedFilesCount Int?   // Number of extracted files
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("scraped_documents")
}